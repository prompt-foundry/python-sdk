# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import Dict, Iterable, Optional
from typing_extensions import Literal, Required, Annotated, TypedDict

from .._utils import PropertyInfo

__all__ = [
    "PromptGetParametersParams",
    "AppendMessage",
    "AppendMessageToolCall",
    "AppendMessageToolCallFunction",
    "OverrideMessage",
    "OverrideMessageToolCall",
    "OverrideMessageToolCallFunction",
]


class PromptGetParametersParams(TypedDict, total=False):
    append_messages: Annotated[Iterable[AppendMessage], PropertyInfo(alias="appendMessages")]
    """
    Appended the the end of the configured prompt messages before running the
    prompt.
    """

    override_messages: Annotated[Iterable[OverrideMessage], PropertyInfo(alias="overrideMessages")]
    """Replaces the configured prompt messages when running the prompt."""

    user: str
    """
    A unique identifier representing your end-user, which can help monitor and
    detect abuse.
    """

    variables: Dict[str, Optional[object]]
    """The template variables added to the prompt when running the prompt."""


class AppendMessageToolCallFunction(TypedDict, total=False):
    arguments: Required[str]
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """

    name: Required[str]
    """The name of the function to call."""


class AppendMessageToolCall(TypedDict, total=False):
    function: Required[AppendMessageToolCallFunction]

    tool_call_id: Required[Annotated[str, PropertyInfo(alias="toolCallId")]]
    """TOOL_CALL_1"""

    type: Required[Literal["function"]]
    """The type of the tool. Currently, only `function` is supported."""


class AppendMessage(TypedDict, total=False):
    content: Required[Optional[str]]
    """Example: "Hello, {{city}}!" """

    role: Required[Literal["user", "assistant", "system", "tool"]]

    tool_call_id: Required[Annotated[Optional[str], PropertyInfo(alias="toolCallId")]]

    tool_calls: Required[Annotated[Optional[Iterable[AppendMessageToolCall]], PropertyInfo(alias="toolCalls")]]


class OverrideMessageToolCallFunction(TypedDict, total=False):
    arguments: Required[str]
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """

    name: Required[str]
    """The name of the function to call."""


class OverrideMessageToolCall(TypedDict, total=False):
    function: Required[OverrideMessageToolCallFunction]

    tool_call_id: Required[Annotated[str, PropertyInfo(alias="toolCallId")]]
    """TOOL_CALL_1"""

    type: Required[Literal["function"]]
    """The type of the tool. Currently, only `function` is supported."""


class OverrideMessage(TypedDict, total=False):
    content: Required[Optional[str]]
    """Example: "Hello, {{city}}!" """

    role: Required[Literal["user", "assistant", "system", "tool"]]

    tool_call_id: Required[Annotated[Optional[str], PropertyInfo(alias="toolCallId")]]

    tool_calls: Required[Annotated[Optional[Iterable[OverrideMessageToolCall]], PropertyInfo(alias="toolCalls")]]
