# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from typing import Dict, List, Optional
from typing_extensions import Literal

from pydantic import Field as FieldInfo

from .._models import BaseModel

__all__ = ["Evaluation", "AppendedMessage", "AppendedMessageToolCall", "AppendedMessageToolCallFunction"]


class AppendedMessageToolCallFunction(BaseModel):
    arguments: str
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """

    name: str
    """The name of the function to call."""


class AppendedMessageToolCall(BaseModel):
    function: AppendedMessageToolCallFunction

    tool_call_id: str = FieldInfo(alias="toolCallId")
    """TOOL_CALL_1"""

    type: Literal["function"]
    """The type of the tool. Currently, only `function` is supported."""


class AppendedMessage(BaseModel):
    content: Optional[str] = None
    """Example: "Hello, {{city}}!" """

    role: Literal["assistant", "system", "tool", "user"]

    tool_call_id: Optional[str] = FieldInfo(alias="toolCallId", default=None)

    tool_calls: Optional[List[AppendedMessageToolCall]] = FieldInfo(alias="toolCalls", default=None)


class Evaluation(BaseModel):
    id: str

    appended_messages: List[AppendedMessage] = FieldInfo(alias="appendedMessages")
    """The messages to append to the completion messages when running the evaluation."""

    prompt_id: str = FieldInfo(alias="promptId")

    variables: Dict[str, Optional[str]]
    """The template variables added to the prompt when executing the prompt."""
